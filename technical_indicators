{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import talib\n",
    "%matplotlib inline\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>Volume</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1986-03-13</td>\n",
       "      <td>0.088542</td>\n",
       "      <td>0.101562</td>\n",
       "      <td>0.088542</td>\n",
       "      <td>0.097222</td>\n",
       "      <td>0.062549</td>\n",
       "      <td>1031788800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1986-03-14</td>\n",
       "      <td>0.097222</td>\n",
       "      <td>0.102431</td>\n",
       "      <td>0.097222</td>\n",
       "      <td>0.100694</td>\n",
       "      <td>0.064783</td>\n",
       "      <td>308160000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1986-03-17</td>\n",
       "      <td>0.100694</td>\n",
       "      <td>0.103299</td>\n",
       "      <td>0.100694</td>\n",
       "      <td>0.102431</td>\n",
       "      <td>0.065899</td>\n",
       "      <td>133171200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1986-03-18</td>\n",
       "      <td>0.102431</td>\n",
       "      <td>0.103299</td>\n",
       "      <td>0.098958</td>\n",
       "      <td>0.099826</td>\n",
       "      <td>0.064224</td>\n",
       "      <td>67766400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1986-03-19</td>\n",
       "      <td>0.099826</td>\n",
       "      <td>0.100694</td>\n",
       "      <td>0.097222</td>\n",
       "      <td>0.098090</td>\n",
       "      <td>0.063107</td>\n",
       "      <td>47894400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-01-13</td>\n",
       "      <td>161.759995</td>\n",
       "      <td>163.309998</td>\n",
       "      <td>161.259995</td>\n",
       "      <td>163.279999</td>\n",
       "      <td>163.279999</td>\n",
       "      <td>21626500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-01-14</td>\n",
       "      <td>163.389999</td>\n",
       "      <td>163.600006</td>\n",
       "      <td>161.720001</td>\n",
       "      <td>162.130005</td>\n",
       "      <td>162.130005</td>\n",
       "      <td>23477400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-01-15</td>\n",
       "      <td>162.619995</td>\n",
       "      <td>163.940002</td>\n",
       "      <td>162.570007</td>\n",
       "      <td>163.179993</td>\n",
       "      <td>163.179993</td>\n",
       "      <td>21417900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-01-16</td>\n",
       "      <td>164.350006</td>\n",
       "      <td>166.240005</td>\n",
       "      <td>164.029999</td>\n",
       "      <td>166.169998</td>\n",
       "      <td>166.169998</td>\n",
       "      <td>23865400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-01-17</td>\n",
       "      <td>167.419998</td>\n",
       "      <td>167.470001</td>\n",
       "      <td>165.429993</td>\n",
       "      <td>167.100006</td>\n",
       "      <td>167.100006</td>\n",
       "      <td>34371700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8533 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Open        High         Low       Close   Adj Close  \\\n",
       "Date                                                                     \n",
       "1986-03-13    0.088542    0.101562    0.088542    0.097222    0.062549   \n",
       "1986-03-14    0.097222    0.102431    0.097222    0.100694    0.064783   \n",
       "1986-03-17    0.100694    0.103299    0.100694    0.102431    0.065899   \n",
       "1986-03-18    0.102431    0.103299    0.098958    0.099826    0.064224   \n",
       "1986-03-19    0.099826    0.100694    0.097222    0.098090    0.063107   \n",
       "...                ...         ...         ...         ...         ...   \n",
       "2020-01-13  161.759995  163.309998  161.259995  163.279999  163.279999   \n",
       "2020-01-14  163.389999  163.600006  161.720001  162.130005  162.130005   \n",
       "2020-01-15  162.619995  163.940002  162.570007  163.179993  163.179993   \n",
       "2020-01-16  164.350006  166.240005  164.029999  166.169998  166.169998   \n",
       "2020-01-17  167.419998  167.470001  165.429993  167.100006  167.100006   \n",
       "\n",
       "                Volume  \n",
       "Date                    \n",
       "1986-03-13  1031788800  \n",
       "1986-03-14   308160000  \n",
       "1986-03-17   133171200  \n",
       "1986-03-18    67766400  \n",
       "1986-03-19    47894400  \n",
       "...                ...  \n",
       "2020-01-13    21626500  \n",
       "2020-01-14    23477400  \n",
       "2020-01-15    21417900  \n",
       "2020-01-16    23865400  \n",
       "2020-01-17    34371700  \n",
       "\n",
       "[8533 rows x 6 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_df=yf.download(\"MSFT\", start=\"1986-03-13\", end=\"2020-01-21\", index_col='Date', parse_dates=True)\n",
    "features_df\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature 1: Percentage daily return."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "1986-03-13         NaN\n",
       "1986-03-14    3.571430\n",
       "1986-03-17    1.724131\n",
       "1986-03-18   -2.542371\n",
       "1986-03-19   -1.739131\n",
       "                ...   \n",
       "2020-01-13    1.202431\n",
       "2020-01-14   -0.704308\n",
       "2020-01-15    0.647621\n",
       "2020-01-16    1.832336\n",
       "2020-01-17    0.559673\n",
       "Name: Returns, Length: 8533, dtype: float64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_df['Returns'] = 100*features_df['Close'].pct_change()\n",
    "features_df['Returns']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature 2: MACD Indicator."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "macd, macdsignal, macdhist = talib.MACD(features_df['Close'])\n",
    "features_df['MACD_hist'] = macdhist"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature 3: Stochastic Oscilator (Momentum Indicator)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "1986-03-13          NaN\n",
       "1986-03-14          NaN\n",
       "1986-03-17          NaN\n",
       "1986-03-18          NaN\n",
       "1986-03-19          NaN\n",
       "                ...    \n",
       "2020-01-13    81.103830\n",
       "2020-01-14    85.313676\n",
       "2020-01-15    84.670268\n",
       "2020-01-16    82.145509\n",
       "2020-01-17    84.487475\n",
       "Name: STOCH, Length: 8533, dtype: float64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "slowk, slowd = talib.STOCH(features_df['High'], features_df['Low'], features_df['Close'])\n",
    "features_df['STOCH'] = slowd\n",
    "features_df['STOCH']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature 4: Moving Average 9."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "1986-03-13           NaN\n",
       "1986-03-14           NaN\n",
       "1986-03-17           NaN\n",
       "1986-03-18           NaN\n",
       "1986-03-19           NaN\n",
       "                 ...    \n",
       "2020-01-13    160.038886\n",
       "2020-01-14    160.531109\n",
       "2020-01-15    160.815553\n",
       "2020-01-16    161.654443\n",
       "2020-01-17    162.551110\n",
       "Name: MA_9, Length: 8533, dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_df['MA_9'] = features_df['Close'].rolling(9).mean()\n",
    "features_df['MA_9']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature 5: Moving Average 18."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "1986-03-13           NaN\n",
       "1986-03-14           NaN\n",
       "1986-03-17           NaN\n",
       "1986-03-18           NaN\n",
       "1986-03-19           NaN\n",
       "                 ...    \n",
       "2020-01-13    158.474444\n",
       "2020-01-14    158.887778\n",
       "2020-01-15    159.377222\n",
       "2020-01-16    159.958332\n",
       "2020-01-17    160.496666\n",
       "Name: MA_18, Length: 8533, dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_df['MA_18'] = features_df['Close'].rolling(18).mean()\n",
    "features_df['MA_18']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature 6: Standard Deviation 9."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "1986-03-13         NaN\n",
       "1986-03-14         NaN\n",
       "1986-03-17         NaN\n",
       "1986-03-18         NaN\n",
       "1986-03-19         NaN\n",
       "                ...   \n",
       "2020-01-13    1.977772\n",
       "2020-01-14    1.871313\n",
       "2020-01-15    2.070477\n",
       "2020-01-16    2.544872\n",
       "2020-01-17    2.901321\n",
       "Name: STD_9, Length: 8533, dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_df['STD_9'] = features_df['Close'].rolling(9).std()\n",
    "features_df['STD_9']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature 7: Standard Deviation 18."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "1986-03-13         NaN\n",
       "1986-03-14         NaN\n",
       "1986-03-17         NaN\n",
       "1986-03-18         NaN\n",
       "1986-03-19         NaN\n",
       "                ...   \n",
       "2020-01-13    2.384394\n",
       "2020-01-14    2.334103\n",
       "2020-01-15    2.253330\n",
       "2020-01-16    2.577417\n",
       "2020-01-17    2.992396\n",
       "Name: STD_18, Length: 8533, dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_df['STD_18'] = features_df['Close'].rolling(18).std()\n",
    "features_df['STD_18']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature 8: Exponential Moving Average 9."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "1986-03-13           NaN\n",
       "1986-03-14           NaN\n",
       "1986-03-17           NaN\n",
       "1986-03-18           NaN\n",
       "1986-03-19           NaN\n",
       "                 ...    \n",
       "2020-01-13    160.347400\n",
       "2020-01-14    160.703921\n",
       "2020-01-15    161.199136\n",
       "2020-01-16    162.193308\n",
       "2020-01-17    163.174648\n",
       "Name: EMA_9, Length: 8533, dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_df['EMA_9'] = talib.EMA(features_df['Close'],9)\n",
    "features_df['EMA_9']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature 9: Exponential Moving Average 18."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "1986-03-13           NaN\n",
       "1986-03-14           NaN\n",
       "1986-03-17           NaN\n",
       "1986-03-18           NaN\n",
       "1986-03-19           NaN\n",
       "                 ...    \n",
       "2020-01-13    158.468456\n",
       "2020-01-14    158.853882\n",
       "2020-01-15    159.309262\n",
       "2020-01-16    160.031445\n",
       "2020-01-17    160.775504\n",
       "Name: EMA_18, Length: 8533, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_df['EMA_18'] = talib.EMA(features_df['Close'],18)\n",
    "features_df['EMA_18'] "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature 10: RSI."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "1986-03-13          NaN\n",
       "1986-03-14          NaN\n",
       "1986-03-17          NaN\n",
       "1986-03-18          NaN\n",
       "1986-03-19          NaN\n",
       "                ...    \n",
       "2020-01-13    70.144873\n",
       "2020-01-14    66.260626\n",
       "2020-01-15    67.975026\n",
       "2020-01-16    72.229704\n",
       "2020-01-17    73.393827\n",
       "Name: RSI, Length: 8533, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_df['RSI'] = talib.RSI(features_df['Close'],18)\n",
    "features_df['RSI'] "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature 11: Bollinger Bands."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>UpperBand</th>\n",
       "      <th>MiddleBand</th>\n",
       "      <th>LowerBand</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1986-03-13</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1986-03-14</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1986-03-17</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1986-03-18</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1986-03-19</td>\n",
       "      <td>0.103360</td>\n",
       "      <td>0.099653</td>\n",
       "      <td>0.095945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-01-13</td>\n",
       "      <td>164.769551</td>\n",
       "      <td>160.875998</td>\n",
       "      <td>156.982445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-01-14</td>\n",
       "      <td>163.887071</td>\n",
       "      <td>161.785999</td>\n",
       "      <td>159.684926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-01-15</td>\n",
       "      <td>163.866958</td>\n",
       "      <td>162.403998</td>\n",
       "      <td>160.941038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-01-16</td>\n",
       "      <td>166.497826</td>\n",
       "      <td>163.219998</td>\n",
       "      <td>159.942171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2020-01-17</td>\n",
       "      <td>168.199762</td>\n",
       "      <td>164.372000</td>\n",
       "      <td>160.544238</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8533 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             UpperBand  MiddleBand   LowerBand\n",
       "Date                                          \n",
       "1986-03-13         NaN         NaN         NaN\n",
       "1986-03-14         NaN         NaN         NaN\n",
       "1986-03-17         NaN         NaN         NaN\n",
       "1986-03-18         NaN         NaN         NaN\n",
       "1986-03-19    0.103360    0.099653    0.095945\n",
       "...                ...         ...         ...\n",
       "2020-01-13  164.769551  160.875998  156.982445\n",
       "2020-01-14  163.887071  161.785999  159.684926\n",
       "2020-01-15  163.866958  162.403998  160.941038\n",
       "2020-01-16  166.497826  163.219998  159.942171\n",
       "2020-01-17  168.199762  164.372000  160.544238\n",
       "\n",
       "[8533 rows x 3 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_df[\"UpperBand\"], features_df[\"MiddleBand\"], features_df[\"LowerBand\"] = talib.BBANDS(features_df['Close'])\n",
    "features_df[[\"UpperBand\", \"MiddleBand\",\"LowerBand\"]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature 12: ATR - Average True Range."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "1986-03-13         NaN\n",
       "1986-03-14         NaN\n",
       "1986-03-17         NaN\n",
       "1986-03-18         NaN\n",
       "1986-03-19         NaN\n",
       "                ...   \n",
       "2020-01-13    1.985583\n",
       "2020-01-14    1.978042\n",
       "2020-01-15    1.966038\n",
       "2020-01-16    2.044179\n",
       "2020-01-17    2.043881\n",
       "Name: ATR, Length: 8533, dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_df['ATR'] = talib.ATR(features_df['High'], features_df['Low'], features_df['Close'])\n",
    "features_df['ATR']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature 13: MFI - Money flow Index."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "1986-03-13          NaN\n",
       "1986-03-14          NaN\n",
       "1986-03-17          NaN\n",
       "1986-03-18          NaN\n",
       "1986-03-19          NaN\n",
       "                ...    \n",
       "2020-01-13    60.888924\n",
       "2020-01-14    53.192802\n",
       "2020-01-15    58.335809\n",
       "2020-01-16    59.765909\n",
       "2020-01-17    61.981005\n",
       "Name: MFI, Length: 8533, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_df['MFI'] = talib.MFI(features_df['High'], features_df['Low'], features_df['Close'], features_df['Volume'])\n",
    "features_df['MFI']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature 14: Support level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "1986-03-13           NaN\n",
       "1986-03-14           NaN\n",
       "1986-03-17           NaN\n",
       "1986-03-18           NaN\n",
       "1986-03-19           NaN\n",
       "                 ...    \n",
       "2020-01-13    143.369995\n",
       "2020-01-14    143.720001\n",
       "2020-01-15    144.059998\n",
       "2020-01-16    144.059998\n",
       "2020-01-17    144.059998\n",
       "Name: Support, Length: 8533, dtype: float64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_df['Support'] = features_df['Close'].rolling(50).min()\n",
    "features_df['Support']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature 15: Resistance level."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "1986-03-13           NaN\n",
       "1986-03-14           NaN\n",
       "1986-03-17           NaN\n",
       "1986-03-18           NaN\n",
       "1986-03-19           NaN\n",
       "                 ...    \n",
       "2020-01-13    163.279999\n",
       "2020-01-14    163.279999\n",
       "2020-01-15    163.279999\n",
       "2020-01-16    166.169998\n",
       "2020-01-17    167.100006\n",
       "Name: Resistance, Length: 8533, dtype: float64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_df['Resistance'] = features_df['Close'].rolling(50).max()\n",
    "features_df['Resistance']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature 16: Chaikin A/D oscillator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "1986-03-13             NaN\n",
       "1986-03-14             NaN\n",
       "1986-03-17             NaN\n",
       "1986-03-18             NaN\n",
       "1986-03-19             NaN\n",
       "                  ...     \n",
       "2020-01-13    1.755418e+07\n",
       "2020-01-14    1.298670e+07\n",
       "2020-01-15    9.191310e+06\n",
       "2020-01-16    1.391552e+07\n",
       "2020-01-17    2.155249e+07\n",
       "Name: Chaikin_OSC, Length: 8533, dtype: float64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_df['Chaikin_OSC'] = talib.ADOSC(features_df['High'], features_df['Low'], features_df['Close'], features_df['Volume'])\n",
    "features_df['Chaikin_OSC']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "features_df.to_csv(\"technical_indicators.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
